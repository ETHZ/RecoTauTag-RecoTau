/* class PFRecoTauDiscriminationByIsolationUsingLeadingPion
 * created : Jul 23 2007,
 * revised : Wed Aug 19 17:09:43 PDT 2009
 * contributors : Ludovic Houchu (Ludovic.Houchu@cern.ch ; IPHC, Strasbourg), Christian Veelken (veelken@fnal.gov ; UC Davis), 
 *                Evan Friis, (evan.friis@cern.ch ; UC Davis)
 */

#include "RecoTauTag/RecoTau/interface/TauDiscriminationProducerBase.h"

class PFRecoTauDiscriminationByLeadingObjectFinding : public PFTauDiscriminationProducerBase  {
   public:
      explicit PFRecoTauDiscriminationByLeadingObjectFinding(const ParameterSet& iConfig):PFTauDiscriminationProducerBase(iConfig){   
         chargedOnly_     = iConfig.getParameter<bool>("UseOnlyChargedHadrons");
      }
      ~PFRecoTauDiscriminationByLeadingObjectFinding(){} 
      double discriminate(const PFTauRef& pfTau);
   private:
      bool chargedOnly_;
};

double PFRecoTauDiscriminationByLeadingObjectFinding::discriminate(const PFTauRef& thePFTauRef)
{
   bool exists = false;
   if( chargedOnly_ )
   {
      exists = thePFTauRef->leadPFChargedHadrCand().isNonnull();
   } 
   else
   {
      exists = thePFTauRef->leadPFCand().isNonnull();
   }

   return ( exists ? 1. : 0. );
}

DEFINE_FWK_MODULE(PFRecoTauDiscriminationByLeadingObjectFinding);



/*
#include "RecoTauTag/RecoTau/interface/PFRecoTauDiscriminationByLeadingTrackFinding.h"
void PFRecoTauDiscriminationByLeadingTrackFinding::produce(Event& iEvent,const EventSetup& iEventSetup){

   Handle<PFTauCollection> thePFTauCollection;
   iEvent.getByLabel(PFTauProducer_,thePFTauCollection);

   auto_ptr<PFTauDiscriminator> thePFTauDiscriminatorByLeadingTrackFinding(new PFTauDiscriminator(PFTauRefProd(thePFTauCollection)));

   //loop over the PFTau candidates
   for(size_t iPFTau=0;iPFTau<thePFTauCollection->size();++iPFTau) {
      PFTauRef thePFTauRef(thePFTauCollection,iPFTau);
      PFTau thePFTau=*thePFTauRef;
      double theleadTrackFindingDiscriminator = 0.;

      // fill the AssociationVector object
      if (thePFTau.leadPFChargedHadrCand().isNonnull()) 
         theleadTrackFindingDiscriminator = 1.;
      else
         theleadTrackFindingDiscriminator = 0.;


      thePFTauDiscriminatorByLeadingTrackFinding->setValue(iPFTau,theleadTrackFindingDiscriminator);
   }

   iEvent.put(thePFTauDiscriminatorByLeadingTrackFinding);

}
  */ 
